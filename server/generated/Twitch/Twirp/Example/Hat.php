<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

namespace Twitch\Twirp\Example;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A Hat is a piece of headwear made by a Haberdasher.
 *
 * Generated from protobuf message <code>twitch.twirp.example.Hat</code>
 */
class Hat extends \Google\Protobuf\Internal\Message
{
    /**
     * The size of a hat should always be in inches.
     *
     * Generated from protobuf field <code>int32 size = 1;</code>
     */
    private $size = 0;
    /**
     * The color of a hat will never be 'invisible', but other than
     * that, anything is fair game.
     *
     * Generated from protobuf field <code>string color = 2;</code>
     */
    private $color = '';
    /**
     * The name of a hat is it's type. Like, 'bowler', or something.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     */
    private $name = '';

    public function __construct() {
        \GPBMetadata\Service::initOnce();
        parent::__construct();
    }

    /**
     * The size of a hat should always be in inches.
     *
     * Generated from protobuf field <code>int32 size = 1;</code>
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * The size of a hat should always be in inches.
     *
     * Generated from protobuf field <code>int32 size = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->size = $var;

        return $this;
    }

    /**
     * The color of a hat will never be 'invisible', but other than
     * that, anything is fair game.
     *
     * Generated from protobuf field <code>string color = 2;</code>
     * @return string
     */
    public function getColor()
    {
        return $this->color;
    }

    /**
     * The color of a hat will never be 'invisible', but other than
     * that, anything is fair game.
     *
     * Generated from protobuf field <code>string color = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setColor($var)
    {
        GPBUtil::checkString($var, True);
        $this->color = $var;

        return $this;
    }

    /**
     * The name of a hat is it's type. Like, 'bowler', or something.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The name of a hat is it's type. Like, 'bowler', or something.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

}

